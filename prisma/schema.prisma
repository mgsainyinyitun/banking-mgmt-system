// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid()) @db.Char(36)
  profileImage String?
  username     String
  nrc          String        @unique
  dob          DateTime
  email        String        @unique
  phone        String
  city         String
  state        String
  address      String
  password     String
  type         ACCOUNT_TYPE  @default(CUSTOMER)
  bankAccounts BankAccount[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model BankAccount {
  id                      Int                    @id @default(autoincrement())
  account_name            String
  accountNumber           String                 @unique @db.Char(36) // 16 digit account number
  accountType             BankAccountType
  balance                 Float                  @default(0.0)
  availableBalance        Float                  @default(0.0)
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  User                    User                   @relation(fields: [userId], references: [id])
  userId                  String                 @db.Char(36)
  accountOpenedAt         DateTime               @default(now())
  accountClosedAt         DateTime?
  accountStatus           AccountStatus          @default(ACTIVE)
  MonthlyBalanceRecord    MonthlyBalanceRecord[]
  transactions_owner      Transaction[]          @relation("transaction_owner_acc")
  transactions_transer_to Transaction[]          @relation("transaction_transer_relation_acc")
}

model Transaction {
  id                Int               @id @default(autoincrement())
  transaction_id    String            @default(uuid()) @db.Char(191)
  amount            Float
  transactionType   TransactionType
  date              DateTime          @default(now())
  description       String?
  transactionStatus TransactionStatus @default(PENDING)
  bankAccount       BankAccount       @relation("transaction_owner_acc", fields: [bankAccountId], references: [id])
  bankAccountId     Int
  transferAccount   BankAccount?      @relation("transaction_transer_relation_acc", fields: [transferAccountId], references: [id])
  transferAccountId Int?
  transferType      TransferType      @default(NONE)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model MonthlyBalanceRecord {
  id            Int         @id @default(autoincrement())
  month         Int
  year          Int
  balance       Float
  bankAccountId Int
  BankAccount   BankAccount @relation(fields: [bankAccountId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([month, year, bankAccountId])
}

enum AccountStatus {
  ACTIVE
  CLOSED
  SUSPENDED
}

enum BankAccountType {
  SAVINGS
  CHECKING
}

enum ACCOUNT_TYPE {
  ADMIN
  MANAHGER
  TELLER
  CUSTOMER
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  TRANSFER
}

enum TransactionStatus {
  PENDING
  SUCCESS
  ERROR
}

enum TransferType {
  CASHIN
  CASHOUT
  NONE
}
